<?php

namespace App\Models;

use CodeIgniter\Model;
use Faker\Generator;

class BookModel extends Model
{
    protected $table            = 'books';
    protected $primaryKey       = 'book_id';
    protected $useAutoIncrement = true;
    protected $returnType       = \App\Entities\BookEntity::class;
    protected $useSoftDeletes   = true;
    protected $protectFields    = true;
    protected $allowedFields    = [
        'title', 'subtitle', 'part', 'count', 'price', 'note', 'section_id', 'series_id', 'search_string',
    ];
    protected bool $allowEmptyInserts = false;
    protected bool $updateOnlyChanged = true;
    protected array $casts            = [];
    protected array $castHandlers     = [];

    // Dates
    protected $useTimestamps = true;
    protected $dateFormat    = 'datetime';
    protected $createdField  = 'created_at';
    protected $updatedField  = 'updated_at';
    protected $deletedField  = 'deleted_at';

    // Validation
    protected $validationRules = [
        'title'         => 'required|string',
        'subtitle'      => 'permit_empty',
        'part'          => 'permit_empty',
        'count'         => 'permit_empty|integer',
        'price'         => 'permit_empty|decimal',
        'note'          => 'permit_empty|string',
        'section_id'    => 'required|string',
        'series_id'     => 'permit_empty|integer',
        'search_string' => 'required|string',
    ];
    protected $validationMessages   = [];
    protected $skipValidation       = false;
    protected $cleanValidationRules = true;

    // Callbacks
    protected $allowCallbacks = true;
    protected $beforeInsert   = [];
    protected $afterInsert    = [];
    protected $beforeUpdate   = [];
    protected $afterUpdate    = [];
    protected $beforeFind     = [];
    protected $afterFind      = [];
    protected $beforeDelete   = [];
    protected $afterDelete    = [];

    // Custom
    protected array $sectionIds = [];
    protected array $seriesIds  = [];

    /**
     * Find book by [books.search_string]
     */
    public function searchString(string $query): self
    {
        return $this->like('search_string', $query);
    }

    /**
     * Fabricator
     *
     * @return array<string, mixed>
     */
    public function fake(Generator &$faker): array
    {
        // Make a subtitle
        if (random_int(1, 100) <= 40) {
            $subtitle = $faker->catchPhrase();
        }

        // Pick a random section_id
        if (count($this->sectionIds) === 0) {
            $this->sectionIds = sectionModel()->findColumn('section_id');
        }
        $sectionId = $this->sectionIds[array_rand($this->sectionIds)];

        // Pick a random series (25%)
        if (random_int(1, 100) <= 25) {
            if (count($this->seriesIds) === 0) {
                $this->seriesIds = seriesModel()->findCOlumn('series_id');
            }

            $seriesId = $this->seriesIds[array_rand($this->seriesIds)];
        }

        // Make a part
        $part = '';
        if (random_int(1, 100) <= 25) {
            $part = (string) $faker->randomDigit();
            if ($part === '0') {
                $part = '';
            }
        }

        // Return values
        return [
            'title'      => $faker->catchPhrase(),
            'subtitle'   => $subtitle ?? '',
            'part'       => $part,
            'price'      => $faker->randomNumber(2),
            'count'      => $faker->randomDigitNotNull(),
            'note'       => 'Generated by fake:book command',
            'section_id' => $sectionId,
            'series_id'  => $seriesId ?? '',
        ];
    }
}
